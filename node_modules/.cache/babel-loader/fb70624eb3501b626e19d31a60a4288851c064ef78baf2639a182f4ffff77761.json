{"ast":null,"code":"var _jsxFileName = \"/home/kainat/Desktop/Voli-Chat/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport io from 'socket.io-client';\nimport Peer from 'simple-peer';\nimport './App.css';\nimport VideoChat from './VideoChat';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:3001');\nfunction App() {\n  _s();\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const [callStarted, setCallStarted] = useState(false);\n  const [isMuted, setIsMuted] = useState(false);\n  const [comment, setComment] = useState('');\n  const [comments, setComments] = useState([]);\n  const [username, setUsername] = useState('');\n  const [channel, setChannel] = useState('');\n  const peer = new Peer({\n    initiator: false,\n    trickle: false\n  });\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      localVideoRef.current.srcObject = stream;\n\n      // Send the stream to the peer\n      peer.addStream(stream);\n\n      // Set up listeners for WebRTC events\n      peer.on('signal', data => {\n        socket.emit('offer', data);\n      });\n      socket.on('answer', data => {\n        peer.signal(data);\n      });\n      socket.on('ice-candidate', data => {\n        peer.signal(data);\n      });\n\n      // Make an initial connection to the server\n      socket.emit('join', {\n        username: 'YourUsername',\n        channel: 'YourChannel'\n      });\n    }).catch(error => console.error('Error accessing local media:', error));\n\n    // Set up listeners for WebRTC events\n    socket.on('offer', offer => {\n      peer.signal(offer);\n    });\n    return () => {\n      // Disconnect from the peer and close the connection\n      peer.destroy();\n    };\n  }, []);\n\n  // Set up listeners for WebRTC events\n  peer.on('stream', remoteStream => {\n    remoteVideoRef.current.srcObject = remoteStream;\n  });\n\n  // Handle incoming comments\n  socket.on('comment', commentData => {\n    setComments(prevComments => [...prevComments, commentData]);\n  });\n\n  // Function to send comments\n  const sendComment = () => {\n    if (comment.trim() !== '') {\n      socket.emit('comment', {\n        username,\n        channel,\n        text: comment\n      });\n      setComment('');\n    }\n  };\n\n  // Function to toggle mute/unmute\n  const toggleMute = () => {\n    const audioTracks = localVideoRef.current.srcObject.getAudioTracks();\n    audioTracks.forEach(track => track.enabled = !track.enabled);\n    setIsMuted(prev => !prev);\n  };\n\n  // Function to initiate/terminate the call\n  const toggleCall = () => {\n    if (callStarted) {\n      peer.destroy();\n      setCallStarted(false);\n    } else {\n      socket.emit('initiateCall', {\n        username,\n        channel\n      });\n      setCallStarted(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(VideoChat, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }, this)\n  }, void 0, false)\n  // <div className=\"video-call-container\">\n  //   <div className=\"video-box\">\n  //     <video ref={localVideoRef} autoPlay muted className=\"local-video\"></video>\n  //     <div className=\"local-username\">You</div>\n  //     <div className=\"control-buttons\">\n  //       <button onClick={toggleMute}>{isMuted ? 'Unmute' : 'Mute'}</button>\n  //       <button onClick={toggleCall}>{callStarted ? 'End Call' : 'Start Call'}</button>\n  //     </div>\n  //   </div>\n\n  //   <div className=\"video-box\">\n  //     <video ref={remoteVideoRef} autoPlay className=\"remote-video\"></video>\n  //     <div className=\"remote-username\">Remote User</div>\n  //   </div>\n\n  //   <div className=\"comment-section\">\n  //     <div className=\"comments\">\n  //       {comments.map((commentData, index) => (\n  //         <div key={index} className=\"comment\">\n  //           <span className=\"comment-username\">{commentData.username}:</span> {commentData.text}\n  //         </div>\n  //       ))}\n  //     </div>\n  //     <div className=\"comment-input\">\n  //       <input\n  //         type=\"text\"\n  //         placeholder=\"Type your comment\"\n  //         value={comment}\n  //         onChange={(e) => setComment(e.target.value)}\n  //       />\n  //       <button onClick={sendComment}>Send</button>\n  //     </div>\n  //   </div>\n  // </div>\n  ;\n}\n_s(App, \"bYivS185sCgGYlNByz705rxu3WQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","io","Peer","VideoChat","jsxDEV","_jsxDEV","Fragment","_Fragment","socket","App","_s","localVideoRef","remoteVideoRef","callStarted","setCallStarted","isMuted","setIsMuted","comment","setComment","comments","setComments","username","setUsername","channel","setChannel","peer","initiator","trickle","navigator","mediaDevices","getUserMedia","video","audio","then","stream","current","srcObject","addStream","on","data","emit","signal","catch","error","console","offer","destroy","remoteStream","commentData","prevComments","sendComment","trim","text","toggleMute","audioTracks","getAudioTracks","forEach","track","enabled","prev","toggleCall","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/kainat/Desktop/Voli-Chat/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport io from 'socket.io-client';\nimport Peer from 'simple-peer';\nimport './App.css';\nimport VideoChat  from './VideoChat';\nconst socket = io('http://localhost:3001');\n\nfunction App() {\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const [callStarted, setCallStarted] = useState(false);\n  const [isMuted, setIsMuted] = useState(false);\n  const [comment, setComment] = useState('');\n  const [comments, setComments] = useState([]);\n  const [username, setUsername] = useState('');\n  const [channel, setChannel] = useState('');\n\n  const peer = new Peer({ initiator: false, trickle: false });\n\n  useEffect(() => {\n    navigator.mediaDevices\n      .getUserMedia({ video: true, audio: true })\n      .then((stream) => {\n        localVideoRef.current.srcObject = stream;\n\n        // Send the stream to the peer\n        peer.addStream(stream);\n\n        // Set up listeners for WebRTC events\n        peer.on('signal', (data) => {\n          socket.emit('offer', data);\n        });\n\n        socket.on('answer', (data) => {\n          peer.signal(data);\n        });\n\n        socket.on('ice-candidate', (data) => {\n          peer.signal(data);\n        });\n\n        // Make an initial connection to the server\n        socket.emit('join', { username: 'YourUsername', channel: 'YourChannel' });\n      })\n      .catch((error) => console.error('Error accessing local media:', error));\n\n    // Set up listeners for WebRTC events\n    socket.on('offer', (offer) => {\n      peer.signal(offer);\n    });\n\n    return () => {\n      // Disconnect from the peer and close the connection\n      peer.destroy();\n    };\n  }, []);\n\n  // Set up listeners for WebRTC events\n  peer.on('stream', (remoteStream) => {\n    remoteVideoRef.current.srcObject = remoteStream;\n  });\n\n  // Handle incoming comments\n  socket.on('comment', (commentData) => {\n    setComments((prevComments) => [...prevComments, commentData]);\n  });\n\n  // Function to send comments\n  const sendComment = () => {\n    if (comment.trim() !== '') {\n      socket.emit('comment', { username, channel, text: comment });\n      setComment('');\n    }\n  };\n\n  // Function to toggle mute/unmute\n  const toggleMute = () => {\n    const audioTracks = localVideoRef.current.srcObject.getAudioTracks();\n    audioTracks.forEach((track) => (track.enabled = !track.enabled));\n    setIsMuted((prev) => !prev);\n  };\n\n  // Function to initiate/terminate the call\n  const toggleCall = () => {\n    if (callStarted) {\n      peer.destroy();\n      setCallStarted(false);\n    } else {\n      socket.emit('initiateCall', { username, channel });\n      setCallStarted(true);\n    }\n  };\n\n  return (\n    <>\n    <VideoChat/>\n    </>\n    // <div className=\"video-call-container\">\n    //   <div className=\"video-box\">\n    //     <video ref={localVideoRef} autoPlay muted className=\"local-video\"></video>\n    //     <div className=\"local-username\">You</div>\n    //     <div className=\"control-buttons\">\n    //       <button onClick={toggleMute}>{isMuted ? 'Unmute' : 'Mute'}</button>\n    //       <button onClick={toggleCall}>{callStarted ? 'End Call' : 'Start Call'}</button>\n    //     </div>\n    //   </div>\n\n    //   <div className=\"video-box\">\n    //     <video ref={remoteVideoRef} autoPlay className=\"remote-video\"></video>\n    //     <div className=\"remote-username\">Remote User</div>\n    //   </div>\n\n    //   <div className=\"comment-section\">\n    //     <div className=\"comments\">\n    //       {comments.map((commentData, index) => (\n    //         <div key={index} className=\"comment\">\n    //           <span className=\"comment-username\">{commentData.username}:</span> {commentData.text}\n    //         </div>\n    //       ))}\n    //     </div>\n    //     <div className=\"comment-input\">\n    //       <input\n    //         type=\"text\"\n    //         placeholder=\"Type your comment\"\n    //         value={comment}\n    //         onChange={(e) => setComment(e.target.value)}\n    //       />\n    //       <button onClick={sendComment}>Send</button>\n    //     </div>\n    //   </div>\n    // </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}