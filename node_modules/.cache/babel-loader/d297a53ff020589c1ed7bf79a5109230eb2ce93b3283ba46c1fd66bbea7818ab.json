{"ast":null,"code":"var _jsxFileName = \"/home/kainat/Desktop/Voli-Chat/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nconst simplePeer = require('simple-peer');\nimport './App.css'; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:3001');\nconst peer = new simplePeer({\n  initiator: false,\n  trickle: false\n});\nfunction App() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [channel, setChannel] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [joinedChannel, setJoinedChannel] = useState('');\n  // Set up video elements\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  useEffect(() => {\n    // Set up local video stream\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      localVideoRef.current.srcObject = stream;\n      peer.addStream(stream);\n    }).catch(error => console.error('Error accessing local media:', error));\n\n    // ... (existing code)\n  }, []);\n\n  // Handle the offer from the server\n  socket.on('offer', offer => {\n    peer.signal(offer);\n  });\n\n  // Send the answer to the server\n  peer.on('signal', data => {\n    socket.emit('answer', data);\n  });\n\n  // Handle ice candidates\n  peer.on('ice-candidate', data => {\n    socket.emit('ice-candidate', data);\n  });\n  // useEffect(() => {\n  //   // Set up listeners for incoming messages and user joins\n  //   socket.on('message', ({ user, text }) => {\n  //     if (user !== 'System') {\n  //       setMessages((prevMessages) => {\n  //         const isDuplicate = prevMessages.some((msg) => msg.text === text && msg.user === user);\n  //         return isDuplicate ? prevMessages : [...prevMessages, { user, text }];\n  //       });\n  //     }\n  //   });\n  //   socket.on('userJoin', ({ username, channel }) => {\n  //     setMessages((prevMessages) => [\n  //       ...prevMessages,\n  //       { user: username, text: `${username} joined ${channel}` },\n  //     ]);\n  //     // Store the currently joined channel for displaying the message\n  //     setJoinedChannel(channel);\n  //   });\n\n  //   // Clean up the socket connection when the component unmounts\n  //   // return () => {\n  //   //   socket.disconnect();\n  //   // };\n  // }, []);\n\n  // const handleJoin = () => {\n  //   socket.emit('join', { username, channel }); // Pass the channel information\n  // };\n\n  // const handleCreateChannel = () => {\n  //   socket.emit('createChannel', channel);\n  // }\n\n  // const handleMessage = () => {\n  //   socket.emit('message', { user: username, channel, text: message });\n  //   setMessage('');\n  // };\n\n  console.log('✌️messages --->', messages);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-call-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        ref: localVideoRef,\n        autoPlay: true,\n        muted: true,\n        className: \"local-video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"local-username\",\n        children: \"You\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        ref: remoteVideoRef,\n        autoPlay: true,\n        className: \"remote-video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"remote-username\",\n        children: \"Remote User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this)\n  // <div className=\"app-container\">\n  //   <div className=\"join-container\">\n  //     <input\n  //       type=\"text\"\n  //       placeholder=\"Username\"\n  //       onChange={(e) => setUsername(e.target.value)}\n  //     />\n  //     <input\n  //       type=\"text\"\n  //       placeholder=\"Channel\"\n  //       onChange={(e) => setChannel(e.target.value)}\n  //     />\n  //     <button onClick={handleJoin}>Join</button>\n  //     <button onClick={handleCreateChannel}>Create Channel</button>\n  //   </div>\n\n  //   <div className=\"chat-container\">\n  //     <div className=\"message-container\">\n  //       {messages.map((msg, index) => (\n  //         <div key={index} className=\"message\">\n  //           {msg.username}: {msg.text}\n  //         </div>\n  //       ))}\n  //     </div>\n\n  //     <div className=\"input-container\">\n  //       <input\n  //         type=\"text\"\n  //         placeholder=\"Type your message\"\n  //         value={message}\n  //         onChange={(e) => setMessage(e.target.value)}\n  //       />\n  //       <button onClick={handleMessage}>Send</button>\n  //     </div>\n  //   </div>\n\n  //   {joinedChannel && (\n  //     <div className=\"join-message\">\n  //       You have joined the channel: <span className=\"channel-name\">{joinedChannel}</span>\n  //     </div>\n  //   )}\n  // </div>\n  ;\n}\n_s(App, \"MGxd/aB6NLWTI4j5wjx6Fez95Fo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","io","simplePeer","require","jsxDEV","_jsxDEV","socket","peer","initiator","trickle","App","_s","username","setUsername","channel","setChannel","message","setMessage","messages","setMessages","joinedChannel","setJoinedChannel","localVideoRef","remoteVideoRef","navigator","mediaDevices","getUserMedia","video","audio","then","stream","current","srcObject","addStream","catch","error","console","on","offer","signal","data","emit","log","className","children","ref","autoPlay","muted","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/kainat/Desktop/Voli-Chat/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nconst simplePeer = require('simple-peer');\n\nimport './App.css'; // Import the CSS file\nconst socket = io('http://localhost:3001');\nconst peer = new simplePeer({ initiator: false, trickle: false });\n\nfunction App() {\n  const [username, setUsername] = useState('');\n  const [channel, setChannel] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [joinedChannel, setJoinedChannel] = useState('');\n  // Set up video elements\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  useEffect(() => {\n    // Set up local video stream\n    navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n      .then((stream) => {\n        localVideoRef.current.srcObject = stream;\n        peer.addStream(stream);\n      })\n      .catch((error) => console.error('Error accessing local media:', error));\n\n    // ... (existing code)\n  }, []);\n\n  // Handle the offer from the server\n  socket.on('offer', (offer) => {\n    peer.signal(offer);\n  });\n\n  // Send the answer to the server\n  peer.on('signal', (data) => {\n    socket.emit('answer', data);\n  });\n\n  // Handle ice candidates\n  peer.on('ice-candidate', (data) => {\n    socket.emit('ice-candidate', data);\n  });\n  // useEffect(() => {\n  //   // Set up listeners for incoming messages and user joins\n  //   socket.on('message', ({ user, text }) => {\n  //     if (user !== 'System') {\n  //       setMessages((prevMessages) => {\n  //         const isDuplicate = prevMessages.some((msg) => msg.text === text && msg.user === user);\n  //         return isDuplicate ? prevMessages : [...prevMessages, { user, text }];\n  //       });\n  //     }\n  //   });\n  //   socket.on('userJoin', ({ username, channel }) => {\n  //     setMessages((prevMessages) => [\n  //       ...prevMessages,\n  //       { user: username, text: `${username} joined ${channel}` },\n  //     ]);\n  //     // Store the currently joined channel for displaying the message\n  //     setJoinedChannel(channel);\n  //   });\n\n  //   // Clean up the socket connection when the component unmounts\n  //   // return () => {\n  //   //   socket.disconnect();\n  //   // };\n  // }, []);\n\n  // const handleJoin = () => {\n  //   socket.emit('join', { username, channel }); // Pass the channel information\n  // };\n\n  // const handleCreateChannel = () => {\n  //   socket.emit('createChannel', channel);\n  // }\n\n  // const handleMessage = () => {\n  //   socket.emit('message', { user: username, channel, text: message });\n  //   setMessage('');\n  // };\n\n  console.log('✌️messages --->', messages);\n  return (\n    <div className=\"video-call-container\">\n      <div className=\"video-box\">\n        <video ref={localVideoRef} autoPlay muted className=\"local-video\"></video>\n        <div className=\"local-username\">You</div>\n      </div>\n\n      <div className=\"video-box\">\n        <video ref={remoteVideoRef} autoPlay className=\"remote-video\"></video>\n        <div className=\"remote-username\">Remote User</div>\n      </div>\n    </div>\n    // <div className=\"app-container\">\n    //   <div className=\"join-container\">\n    //     <input\n    //       type=\"text\"\n    //       placeholder=\"Username\"\n    //       onChange={(e) => setUsername(e.target.value)}\n    //     />\n    //     <input\n    //       type=\"text\"\n    //       placeholder=\"Channel\"\n    //       onChange={(e) => setChannel(e.target.value)}\n    //     />\n    //     <button onClick={handleJoin}>Join</button>\n    //     <button onClick={handleCreateChannel}>Create Channel</button>\n    //   </div>\n\n    //   <div className=\"chat-container\">\n    //     <div className=\"message-container\">\n    //       {messages.map((msg, index) => (\n    //         <div key={index} className=\"message\">\n    //           {msg.username}: {msg.text}\n    //         </div>\n    //       ))}\n    //     </div>\n\n    //     <div className=\"input-container\">\n    //       <input\n    //         type=\"text\"\n    //         placeholder=\"Type your message\"\n    //         value={message}\n    //         onChange={(e) => setMessage(e.target.value)}\n    //       />\n    //       <button onClick={handleMessage}>Send</button>\n    //     </div>\n    //   </div>\n\n    //   {joinedChannel && (\n    //     <div className=\"join-message\">\n    //       You have joined the channel: <span className=\"channel-name\">{joinedChannel}</span>\n    //     </div>\n    //   )}\n    // </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}