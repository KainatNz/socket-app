{"ast":null,"code":"var _jsxFileName = \"/home/kainat/Desktop/Voli-Chat/frontend/src/App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:3001');\nconst App = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [username, setUsername] = useState('');\n  const [channel, setChannel] = useState('');\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    // Set a default username for testing\n    setUsername(prompt('Enter your username'));\n\n    // Fetch messages from the server when the component mounts\n    fetchMessages();\n\n    // Listen for incoming messages from the server\n    socket.on('message', data => {\n      setMessages(prevMessages => [...prevMessages, data]);\n    });\n\n    // Clean up the socket connection when the component unmounts\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n\n  // Function to fetch messages from the server\n  const fetchMessages = async () => {\n    try {\n      const response = await fetch(`http://localhost:3001/messages?channel=${channel}`);\n      const data = await response.json();\n      setMessages(data);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n\n  // Function to send a message\n  const sendMessage = () => {\n    const newMessage = {\n      text: input,\n      timestamp: new Date(),\n      from: username,\n      channel\n    };\n    socket.emit('message', newMessage);\n    setMessages(prevMessages => [...prevMessages, newMessage]);\n    setInput('');\n  };\n\n  // Function to join a channel\n  const joinChannel = newChannel => {\n    socket.emit('join-channel', {\n      username,\n      channelName: newChannel\n    });\n    setChannel(newChannel);\n    fetchMessages(); // Fetch messages for the new channel\n  };\n\n  // Scroll to the bottom when new messages are received\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"channel-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Channels\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => joinChannel('general'),\n          children: \"General\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => joinChannel('random'),\n          children: \"Random\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-container\",\n        children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.from === 'Admin' ? 'admin' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"message-text\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [message.from, \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 17\n            }, this), \" \", message.text]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"message-timestamp\",\n            children: new Date(message.timestamp).toLocaleTimeString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type your message...\",\n          value: input,\n          onChange: e => setInput(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"rLmNUFiqtUq4BTw6fdnoSKYKdtM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","io","jsxDEV","_jsxDEV","socket","App","_s","messages","setMessages","input","setInput","username","setUsername","channel","setChannel","messagesEndRef","prompt","fetchMessages","on","data","prevMessages","disconnect","response","fetch","json","error","console","sendMessage","newMessage","text","timestamp","Date","from","emit","joinChannel","newChannel","channelName","current","scrollIntoView","behavior","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","message","index","toLocaleTimeString","ref","type","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/home/kainat/Desktop/Voli-Chat/frontend/src/App.js"],"sourcesContent":["// App.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nimport './App.css';\n\nconst socket = io('http://localhost:3001');\n\nconst App = () => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [username, setUsername] = useState('');\n  const [channel, setChannel] = useState('');\n  const messagesEndRef = useRef(null);\n\n  useEffect(() => {\n    // Set a default username for testing\n    setUsername(prompt('Enter your username'));\n\n    // Fetch messages from the server when the component mounts\n    fetchMessages();\n\n    // Listen for incoming messages from the server\n    socket.on('message', (data) => {\n      setMessages((prevMessages) => [...prevMessages, data]);\n    });\n\n    // Clean up the socket connection when the component unmounts\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n\n  // Function to fetch messages from the server\n  const fetchMessages = async () => {\n    try {\n      const response = await fetch(`http://localhost:3001/messages?channel=${channel}`);\n      const data = await response.json();\n      setMessages(data);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n\n  // Function to send a message\n  const sendMessage = () => {\n    const newMessage = { text: input, timestamp: new Date(), from: username, channel };\n    socket.emit('message', newMessage);\n    setMessages((prevMessages) => [...prevMessages, newMessage]);\n    setInput('');\n  };\n\n  // Function to join a channel\n  const joinChannel = (newChannel) => {\n    socket.emit('join-channel', { username, channelName: newChannel });\n    setChannel(newChannel);\n    fetchMessages(); // Fetch messages for the new channel\n  };\n\n  // Scroll to the bottom when new messages are received\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [messages]);\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"chat-container\">\n        <div className=\"channel-container\">\n          <h2>Channels</h2>\n          <button onClick={() => joinChannel('general')}>General</button>\n          <button onClick={() => joinChannel('random')}>Random</button>\n          {/* Add more channels as needed */}\n        </div>\n        <div className=\"message-container\">\n          {messages.map((message, index) => (\n            <div key={index} className={`message ${message.from === 'Admin' ? 'admin' : ''}`}>\n              <p className=\"message-text\">\n                <strong>{message.from}:</strong> {message.text}\n              </p>\n              <span className=\"message-timestamp\">\n                {new Date(message.timestamp).toLocaleTimeString()}\n              </span>\n            </div>\n          ))}\n          <div ref={messagesEndRef}></div>\n        </div>\n        <div className=\"input-container\">\n          <input\n            type=\"text\"\n            placeholder=\"Type your message...\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n          />\n          <button onClick={sendMessage}>Send</button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}