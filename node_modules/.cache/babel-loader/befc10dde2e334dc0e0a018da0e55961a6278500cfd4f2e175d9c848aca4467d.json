{"ast":null,"code":"var _jsxFileName = \"/home/kainat/Desktop/Voli-Chat/frontend/src/App.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport io from 'socket.io-client';\nimport Peer from 'simple-peer';\nimport './App.css';\nimport VideoChat from './VideoChat';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:3001');\nfunction App() {\n  // const localVideoRef = useRef(null);\n  // const remoteVideoRef = useRef(null);\n  // const [callStarted, setCallStarted] = useState(false);\n  // const [isMuted, setIsMuted] = useState(false);\n  // const [comment, setComment] = useState('');\n  // const [comments, setComments] = useState([]);\n  // const [username, setUsername] = useState('');\n  // const [channel, setChannel] = useState('');\n\n  // const peer = new Peer({ initiator: false, trickle: false });\n\n  // useEffect(() => {\n  //   navigator.mediaDevices\n  //     .getUserMedia({ video: true, audio: true })\n  //     .then((stream) => {\n  //       localVideoRef.current.srcObject = stream;\n\n  //       // Send the stream to the peer\n  //       peer.addStream(stream);\n\n  //       // Set up listeners for WebRTC events\n  //       peer.on('signal', (data) => {\n  //         socket.emit('offer', data);\n  //       });\n\n  //       socket.on('answer', (data) => {\n  //         peer.signal(data);\n  //       });\n\n  //       socket.on('ice-candidate', (data) => {\n  //         peer.signal(data);\n  //       });\n\n  //       // Make an initial connection to the server\n  //       socket.emit('join', { username: 'YourUsername', channel: 'YourChannel' });\n  //     })\n  //     .catch((error) => console.error('Error accessing local media:', error));\n\n  //   // Set up listeners for WebRTC events\n  //   socket.on('offer', (offer) => {\n  //     peer.signal(offer);\n  //   });\n\n  //   return () => {\n  //     // Disconnect from the peer and close the connection\n  //     peer.destroy();\n  //   };\n  // }, []);\n\n  // // Set up listeners for WebRTC events\n  // peer.on('stream', (remoteStream) => {\n  //   remoteVideoRef.current.srcObject = remoteStream;\n  // });\n\n  // // Handle incoming comments\n  // socket.on('comment', (commentData) => {\n  //   setComments((prevComments) => [...prevComments, commentData]);\n  // });\n\n  // // Function to send comments\n  // const sendComment = () => {\n  //   if (comment.trim() !== '') {\n  //     socket.emit('comment', { username, channel, text: comment });\n  //     setComment('');\n  //   }\n  // };\n\n  // // Function to toggle mute/unmute\n  // const toggleMute = () => {\n  //   const audioTracks = localVideoRef.current.srcObject.getAudioTracks();\n  //   audioTracks.forEach((track) => (track.enabled = !track.enabled));\n  //   setIsMuted((prev) => !prev);\n  // };\n\n  // // Function to initiate/terminate the call\n  // const toggleCall = () => {\n  //   if (callStarted) {\n  //     peer.destroy();\n  //     setCallStarted(false);\n  //   } else {\n  //     socket.emit('initiateCall', { username, channel });\n  //     setCallStarted(true);\n  //   }\n  // };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(VideoChat, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }, this)\n  }, void 0, false)\n  // <div className=\"video-call-container\">\n  //   <div className=\"video-box\">\n  //     <video ref={localVideoRef} autoPlay muted className=\"local-video\"></video>\n  //     <div className=\"local-username\">You</div>\n  //     <div className=\"control-buttons\">\n  //       <button onClick={toggleMute}>{isMuted ? 'Unmute' : 'Mute'}</button>\n  //       <button onClick={toggleCall}>{callStarted ? 'End Call' : 'Start Call'}</button>\n  //     </div>\n  //   </div>\n\n  //   <div className=\"video-box\">\n  //     <video ref={remoteVideoRef} autoPlay className=\"remote-video\"></video>\n  //     <div className=\"remote-username\">Remote User</div>\n  //   </div>\n\n  //   <div className=\"comment-section\">\n  //     <div className=\"comments\">\n  //       {comments.map((commentData, index) => (\n  //         <div key={index} className=\"comment\">\n  //           <span className=\"comment-username\">{commentData.username}:</span> {commentData.text}\n  //         </div>\n  //       ))}\n  //     </div>\n  //     <div className=\"comment-input\">\n  //       <input\n  //         type=\"text\"\n  //         placeholder=\"Type your comment\"\n  //         value={comment}\n  //         onChange={(e) => setComment(e.target.value)}\n  //       />\n  //       <button onClick={sendComment}>Send</button>\n  //     </div>\n  //   </div>\n  // </div>\n  ;\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","io","Peer","VideoChat","jsxDEV","_jsxDEV","Fragment","_Fragment","socket","App","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/kainat/Desktop/Voli-Chat/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport io from 'socket.io-client';\nimport Peer from 'simple-peer';\nimport './App.css';\nimport VideoChat  from './VideoChat';\nconst socket = io('http://localhost:3001');\n\nfunction App() {\n  // const localVideoRef = useRef(null);\n  // const remoteVideoRef = useRef(null);\n  // const [callStarted, setCallStarted] = useState(false);\n  // const [isMuted, setIsMuted] = useState(false);\n  // const [comment, setComment] = useState('');\n  // const [comments, setComments] = useState([]);\n  // const [username, setUsername] = useState('');\n  // const [channel, setChannel] = useState('');\n\n  // const peer = new Peer({ initiator: false, trickle: false });\n\n  // useEffect(() => {\n  //   navigator.mediaDevices\n  //     .getUserMedia({ video: true, audio: true })\n  //     .then((stream) => {\n  //       localVideoRef.current.srcObject = stream;\n\n  //       // Send the stream to the peer\n  //       peer.addStream(stream);\n\n  //       // Set up listeners for WebRTC events\n  //       peer.on('signal', (data) => {\n  //         socket.emit('offer', data);\n  //       });\n\n  //       socket.on('answer', (data) => {\n  //         peer.signal(data);\n  //       });\n\n  //       socket.on('ice-candidate', (data) => {\n  //         peer.signal(data);\n  //       });\n\n  //       // Make an initial connection to the server\n  //       socket.emit('join', { username: 'YourUsername', channel: 'YourChannel' });\n  //     })\n  //     .catch((error) => console.error('Error accessing local media:', error));\n\n  //   // Set up listeners for WebRTC events\n  //   socket.on('offer', (offer) => {\n  //     peer.signal(offer);\n  //   });\n\n  //   return () => {\n  //     // Disconnect from the peer and close the connection\n  //     peer.destroy();\n  //   };\n  // }, []);\n\n  // // Set up listeners for WebRTC events\n  // peer.on('stream', (remoteStream) => {\n  //   remoteVideoRef.current.srcObject = remoteStream;\n  // });\n\n  // // Handle incoming comments\n  // socket.on('comment', (commentData) => {\n  //   setComments((prevComments) => [...prevComments, commentData]);\n  // });\n\n  // // Function to send comments\n  // const sendComment = () => {\n  //   if (comment.trim() !== '') {\n  //     socket.emit('comment', { username, channel, text: comment });\n  //     setComment('');\n  //   }\n  // };\n\n  // // Function to toggle mute/unmute\n  // const toggleMute = () => {\n  //   const audioTracks = localVideoRef.current.srcObject.getAudioTracks();\n  //   audioTracks.forEach((track) => (track.enabled = !track.enabled));\n  //   setIsMuted((prev) => !prev);\n  // };\n\n  // // Function to initiate/terminate the call\n  // const toggleCall = () => {\n  //   if (callStarted) {\n  //     peer.destroy();\n  //     setCallStarted(false);\n  //   } else {\n  //     socket.emit('initiateCall', { username, channel });\n  //     setCallStarted(true);\n  //   }\n  // };\n\n  return (\n    <>\n    <VideoChat/>\n    </>\n    // <div className=\"video-call-container\">\n    //   <div className=\"video-box\">\n    //     <video ref={localVideoRef} autoPlay muted className=\"local-video\"></video>\n    //     <div className=\"local-username\">You</div>\n    //     <div className=\"control-buttons\">\n    //       <button onClick={toggleMute}>{isMuted ? 'Unmute' : 'Mute'}</button>\n    //       <button onClick={toggleCall}>{callStarted ? 'End Call' : 'Start Call'}</button>\n    //     </div>\n    //   </div>\n\n    //   <div className=\"video-box\">\n    //     <video ref={remoteVideoRef} autoPlay className=\"remote-video\"></video>\n    //     <div className=\"remote-username\">Remote User</div>\n    //   </div>\n\n    //   <div className=\"comment-section\">\n    //     <div className=\"comments\">\n    //       {comments.map((commentData, index) => (\n    //         <div key={index} className=\"comment\">\n    //           <span className=\"comment-username\">{commentData.username}:</span> {commentData.text}\n    //         </div>\n    //       ))}\n    //     </div>\n    //     <div className=\"comment-input\">\n    //       <input\n    //         type=\"text\"\n    //         placeholder=\"Type your comment\"\n    //         value={comment}\n    //         onChange={(e) => setComment(e.target.value)}\n    //       />\n    //       <button onClick={sendComment}>Send</button>\n    //     </div>\n    //   </div>\n    // </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,EAAE,MAAM,kBAAkB;AACjC,OAAOC,IAAI,MAAM,aAAa;AAC9B,OAAO,WAAW;AAClB,OAAOC,SAAS,MAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACrC,MAAMC,MAAM,GAAGP,EAAE,CAAC,uBAAuB,CAAC;AAE1C,SAASQ,GAAGA,CAAA,EAAG;EACb;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACEJ,OAAA,CAAAE,SAAA;IAAAG,QAAA,eACAL,OAAA,CAACF,SAAS;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC;EAAC,gBACV;EACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAAA;AAEJ;AAACC,EAAA,GA7HQN,GAAG;AA+HZ,eAAeA,GAAG;AAAC,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}